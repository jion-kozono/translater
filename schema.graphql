type User
    @model(
        mutations: { create: "registerUser", update: "updateUser" }
    )
    @auth(rules: [{ allow: owner, operations: [create, delete, update] }])
    @key(name: "byEmail", fields: ["email", "id"], queryField: "userByEmail") {
    id: ID!
    username: String!
    email: AWSEmail!
    selfIntroduction: String
    score: String!
    posts: [Post]! @connection(keyName: "postsByUser", fields: ["id"])
    translationPosts: [TranslationPost]
        @connection(keyName: "translationPostsByUser", fields: ["id"])
    Postikes: [PostLike] @connection(keyName: "likePByUser", fields: ["id"])
    translationPostikes: [TranslationPostLike]
        @connection(keyName: "likeTPByUser", fields: ["id"])
    createdAt: String!
    updatedAt: String!
}
type Post
    @model
    @auth(
        rules: [
        { allow: owner },
        { allow: private, provider: userPools, operations: [read] },
        { allow: public, provider: apiKey, operations: [read] },
        ]
    )
    @searchable
    @key(name: "postsByUser", fields: ["userId", "createdAt"]) {
    id: ID!
    userId: ID!
    content: String!
    description: String!
    translationPosts: [TranslationPost] @connection(keyName: "byPost", fields: ["id"])
    postLikes: [PostLike] @connection(keyName: "likesByPost", fields: ["id"])
    createdAt: String!
    updatedAt: String!
    user: User! @connection(fields: ["userId"])
}
type TranslationPost
    @model
    @auth(
        rules: [
        { allow: owner },
        { allow: private, provider: userPools, operations: [read] },
        { allow: public, provider: apiKey, operations: [read] }
        ]
    )
    @key(name: "byPost", fields: ["postId", "createdAt"])
    @key(name: "translationPostsByUser", fields: ["userId", "createdAt"]) {
    id: ID!
    userId: ID!
    postId: ID!
    content: String!
    translationPostLikes: [TranslationPostLike] @connection(keyName: "likesByTP", fields: ["id"])
    createdAt: String!
    updatedAt: String!
    user: User! @connection(fields: ["userId"])
}
type PostLike
    @model
    @auth(
        rules: [
        { allow: owner },
        { allow: private, provider: userPools, operations: [read] },
        { allow: public, provider: apiKey, operations: [read] },
        ]
    )
    @key(name: "likePByUser", fields: ["userId", "createdAt"])
    @key(name: "likesByPost", fields: ["postId", "createdAt"]) {
    id: ID!
    userId: ID!
    postId: ID!
    createdAt: String!
    updatedAt: String!
}
type TranslationPostLike
    @model
    @auth(
        rules: [
        { allow: owner },
        { allow: private, provider: userPools, operations: [read] },
        { allow: public, provider: apiKey, operations: [read] }
        ]
    )
    @key(name: "likeTPByUser", fields: ["userId", "createdAt"])
    @key(name: "likesByTP", fields: ["translationPostId", , "createdAt"]) {
    id: ID!
    userId: ID!
    translationPostId: ID!
    createdAt: String!
    updatedAt: String!
}
